#!/usr/bin/env python

import boto3
import sys
import subprocess
import re
from argparse import ArgumentParser

################################################################################
#  Var Declares
# scriptname = "ec2"
# scriptbuildnum = "0.2.0"
# scriptbuilddate = "2017-04-17"

################################################################################
#  Classes

class _Getch:
    """Gets a single character from standard input.  Does not echo to the
screen."""
    def __init__(self):
        try:
            self.impl = _GetchWindows()
        except ImportError:
            self.impl = _GetchUnix()

    def __call__(self): return self.impl()


class _GetchUnix:
    def __init__(self):
        import tty, sys

    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


class _GetchWindows:
    def __init__(self):
        import msvcrt

    def __call__(self):
        import msvcrt
        return msvcrt.getch()


################################################################################
#  Functions

def setupColor():
    global CLRnormal
    global CLRheading
    global CLRheading2
    global CLRtitle
    global CLRtitle2
    global CLRsuccess
    global CLRwarning
    global CLRerror
    if sys.stdout.isatty():
        ncolors = runBash("tput colors")    # see if it supports colors
        if ncolors != "" and ncolors >= 8:
            # Set Colors
            bold = runBash("tput bold")
            red = runBash("tput setaf 1")
            green = runBash("tput setaf 2")
            yellow = runBash("tput setaf 3")
            blue = runBash("tput setaf 4")
            magenta = runBash("tput setaf 5")
            cyan = runBash("tput setaf 6")
            white = runBash("tput setaf 7")
            # Set Color Theme
            CLRnormal = bold + white
            CLRheading = bold + green
            CLRheading2 = bold + blue
            CLRtitle = bold + cyan
            CLRtitle2 = bold + yellow
            CLRsuccess = bold + green
            CLRwarning = bold + yellow
            CLRerror = bold + red

def colorInstanceStatus(state):
    if state == "running":
        CLRstatus = CLRsuccess
    elif state == "stopped":
        CLRstatus = CLRerror
    elif state == "stopping":
        CLRstatus = CLRwarning
    elif state == "pending":
        CLRstatus = CLRwarning
    elif state == "starting":
        CLRstatus = CLRwarning
    else:
        CLRstatus = CLRnormal
    return CLRstatus

def displayVer():
    print "%s%s%s  ver  %s%s%s - %s%s%s" % (CLRheading, scriptname, CLRnormal, CLRtitle, scriptbuildnum, CLRnormal, CLRtitle, scriptbuilddate, CLRnormal)

def runBash(cmd):
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    (output, err) = p.communicate()
    if err:
        p_status = p.wait()
        print "Command exit status / return code : ", p_status
    return output.rstrip()

def printWithoutCR(value):
    sys.stdout.write(value)

def printList(listname, displayname):
    print "%sListing %s %s" % (CLRheading, displayname, CLRnormal)
    for x,y in listname.items():
        print "\ti = %s%s%s, %s = %s%s%s" % (CLRtitle, x, CLRnormal, displayname, CLRtitle, y, CLRnormal)

def getArguments():
    global debug
    # global filterType2
    parser = ArgumentParser(description='list info for EC2 instances',
                prog='ec2', version='ec2 0.2.0', usage= 'ec2 [option]')
    parser.add_argument('command', choices=['list', 'start', 'stop', 'ssh'])
    parser.add_argument('--name', '-n', action="store",
                help='list instances with the specified name')
    parser.add_argument('--id', '-i', action="store",
                help='list instance info for instance-id')
    parser.add_argument('--running', '-r', action = "store_true",
                help = 'list all running instances')
    parser.add_argument('--stopped', '-s', action = "store_true",
                help='list all stopped instances')
    parser.add_argument('--debug', '-d', action="store_true",
                help='debug mode')
    options = parser.parse_args()
    if options.command == "list":
        actionType="list"
        filterType2 = ""
        if options.running:
            filterType = "running"
            filters = "running"
            OutputText = "Running EC2 Instances"
        elif options.stopped:
            filterType = "stopped"
            filters = "stopped"
            OutputText = "Stopped EC2 Instances"
        else:
            filterType = "all"
            filters = ""
            OutputText = "All Instances"
    elif options.command == "start":
        actionType = "start"
        filterType2 = "stopped"
        filterType = ""
        filters = ""
        OutputText = ""
    elif options.command == "stop":
        actionType = "stop"
        filterType2 = "running"
        filterType = ""
        filters = ""
        OutputText = ""
    elif options.command == "ssh":
        actionType = "ssh"
        filterType2 = "running"
        filterType = ""
        filters = ""
        OutputText = ""
        # add sub-options for no-pem and username modes
    if options.name:
        filterType = "name"
        filters = options.name
        OutputText = "Instances '{}'".format(options.name)
    elif options.id:
        filterType = "id"
        filters = options.id
        OutputText = "Instance '{}'".format(options.id)
    if options.debug:
        debug=True
    return actionType, filterType, filterType2, filters, OutputText

def getInstanceIDs(filtype, filter):
    instanceID = {}
    if filtype == "id":
        instanceSummaryData = ec2C.describe_instances( InstanceIds=["{0}".format(filter)])
    elif filtype == "running" or filtype == "stopped":
        instanceSummaryData = ec2C.describe_instances( Filters =[{'Name':'instance-state-name', 'Values':["{0}".format(filter)]}])
    elif filtype == "name":
        instanceSummaryData = ec2C.describe_instances( Filters =[{'Name':'tag:Name', 'Values':["{0}".format(filter)]}])
    else:
        instanceSummaryData = ec2C.describe_instances()

    for i,v in enumerate(instanceSummaryData['Reservations']):
        ID = v['Instances'][0]['InstanceId']
        instanceID[i] = ID
    numInstances=len(instanceID)
    return instanceID, numInstances

def getAMIname(ID):
    instanceImage = ec2R.Image(ID).name
    return instanceImage

def getInstanceDetails(qty,idlist):
    instanceState = {}
    instanceAMI = {}
    instanceName = {}
    instanceAMIName = {}
    for i in range(qty):
        instanceData = ec2R.Instance(idlist[i])
        instanceState[i] = instanceData.state['Name']
        instanceAMI[i] = instanceData.image_id
        instanceTag = instanceData.tags
        for j in range(len(instanceTag)):
            if instanceTag[j]['Key'] == 'Name':
                instanceName[i]=instanceTag[j]['Value']
                break
        instanceAMIName[i] = getAMIname(instanceAMI[i])
    return instanceState, instanceAMI, instanceName, instanceAMIName

# def refineInstanceList(qty, names, idlist, state, ami, aminame):
def refineInstanceList(numInstances, filterType2):
    newQty = numInstances
    for i in range(numInstances):
        if instanceState[i] != filterType2:        # it's in a state we want to filter out
            # print "REMOVAL - item: %s  -  filter: %s" % (instanceState[i], filterType2)
            del instanceName[i]
            del instanceID[i]
            del instanceState[i]
            del instanceAMI[i]
            del instanceAMIName[i]
            newQty -= 1
    return newQty

def getInstanceConnectInfo(specificid):
    instanceData = ec2R.Instance(specificid)
    # PublicDNS=instanceData.public_dns_name
    instanceIP = instanceData.public_ip_address
    instanceKey = instanceData.key_name
    return instanceIP, instanceKey

# def displayInstanceList(title, qty, names, idlist, state, ami, aminame, numbered="no"):
def displayInstanceList(title, numbered="no"):
    # Print Info gathered grouped by instance
    if numbered == "no":
        print "\n%s%s%s\n" % (CLRheading, title, CLRnormal)
    for i in range(numInstances):
        if numbered == "yes":
            print "Instance %s#%s%s" % (CLRwarning, i+1, CLRnormal)
        CLRstatus = colorInstanceStatus(instanceState[i])
        print "\tName: %s%s%s\t\tID: %s%s%s\t\tStatus: %s%s%s" % (CLRtitle, instanceName[i], CLRnormal, CLRtitle, instanceID[i], CLRnormal, CLRstatus, instanceState[i], CLRnormal)
        print "\tAMI: %s%s%s\tAMI Name: %s%s%s\n" % (CLRtitle, instanceAMI[i], CLRnormal, CLRtitle, instanceAMIName[i], CLRnormal)

def selectFromList(OutputText, actionType):
    getch = _Getch()
    selectionValid = "False"
    displayInstanceList(OutputText, "yes")
    while selectionValid != "True":
        printWithoutCR("Enter %s#%s of instance to %s (1-%i) [0 aborts]: " % (CLRwarning, CLRnormal, actionType, numInstances))
        RawkeyEntered = getch()
        printWithoutCR(RawkeyEntered)
        try:
            KeyEntered = int(RawkeyEntered)
        except:
            print
            continue
        if KeyEntered == 0:
            print "\n\n%saborting%s - %s instance\n" % (CLRerror, CLRnormal, actionType)
            sys.exit()
        if KeyEntered >= 1 and KeyEntered <= numInstances:
            instanceForAction = KeyEntered - 1
            selectionValid = "True"
        else:
            printWithoutCR("\n%sInvalid entry:%s enter a number between 1 and %s.\n" % (CLRerror, CLRnormal, numInstances))
    return instanceForAction

# def displayInstances(title, qty, idlist, numbered="no"):
#     state = {}
#     ami = {}
#     names = {}
#     aminame = {}
#     (state, ami, names, aminame) = getInstanceDetails(qty, idlist)
#     # Print Info gathered grouped by instance
#     if numbered == "no":
#         print "\n%s%s%s\n" % (CLRheading, title, CLRnormal)
#     for i in range(qty):
#         if numbered == "yes":
#             print "Instance %s#%s%s" % (CLRwarning, i+1, CLRnormal)
#         CLRstatus = colorInstanceStatus(state[i])
#         print "\tName: %s%s%s\t\tID: %s%s%s\t\tStatus: %s%s%s" % (CLRtitle, names[i], CLRnormal, CLRtitle, idlist[i], CLRnormal, CLRstatus, state[i], CLRnormal)
#         print "\tAMI: %s%s%s\tAMI Name: %s%s%s\n" % (CLRtitle, ami[i], CLRnormal, CLRtitle, aminame[i], CLRnormal)

# def debugPrintList(instanceID, instanceState, instanceAMI, instanceName, instanceAMIName):
def debugPrintList():
    print "%sDebug Listing of Info by Type%s\n" % (CLRheading2, CLRnormal)
    printList(instanceID, "instanceID")
    printList(instanceState, "instanceState")
    printList(instanceAMI, "instanceAMI")
    printList(instanceName, "instanceName")
    printList(instanceAMIName, "instanceAMIName")

################################################################################
#  Execution Begins

def main():

    # global debug
    global ec2C
    global ec2R

    global numInstances
    global instanceID
    global instanceState
    global instanceAMI
    global instanceName
    global instanceAMIName

    instanceID = {}
    instanceState = {}
    instanceAMI = {}
    instanceName = {}
    instanceAMIName = {}

    debug = False


    # Setup AWS EC2 connections
    ec2C = boto3.client('ec2')
    ec2R = boto3.resource('ec2')

    setupColor()
    (actionType, filterType, filterType2, filters, OutputText) = getArguments()

    if (debug):
        print "actionType = ", actionType
        print "filterType = ", filterType
        print "filterType2 = ", filterType2
        print "filters = ", filters
        print "OutputText = ", OutputText

    if actionType != "list" and filterType == "":
        print "%sError%s - instance identifier not specified" % (CLRerror, CLRnormal)
        sys.exit()

    (instanceID, numInstances) = getInstanceIDs(filterType, filters)
    (instanceState, instanceAMI, instanceName, instanceAMIName) = getInstanceDetails(numInstances, instanceID)

    if actionType == "list":
        displayInstanceList(OutputText)
    # elif actionType == "start" or actionType == "stop":
    else:
        # refine list of instances based on actionType
        numInstances = refineInstanceList(numInstances, filterType2)
        if numInstances == 0:
            print "%sNo instance name %s found %s%s." % (CLRwarning, filters, filterType2, CLRnormal)
            sys.exit()
        if numInstances > 1:
            print "\n%s instances match this query:\n" % (numInstances)
            instanceForAction = selectFromList(OutputText, actionType)
        else:
            instanceForAction = 0
        instanceIDForAction = instanceID[instanceForAction]
        print "\n%sing instance: %s%s%s with id: %s%s%s" % (actionType, CLRtitle, filters, CLRnormal, CLRtitle, instanceIDForAction, CLRnormal)
        if actionType == "start":
            # ec2 command to start & results
            print "starting"
        elif actionType == "stop":
            # ec2 command to stop & results
            print "stopping"
        elif actionType == "ssh":
            print "sshing"
            # ec2 command to connect via ssh & results
            (instanceIP, instanceKey) = getInstanceConnectInfo(instanceIDForAction)
            if (debug):
                print "target IP= ", instanceIP
                print "target key = ", instanceKey
    sys.exit()

if __name__ == '__main__':
    main()
